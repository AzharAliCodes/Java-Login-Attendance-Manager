/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectionProvider;
import java.awt.Color;
//import java.awt.List;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.table.DefaultTableModel;
import utlity.BDUtility;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import java.util.List;
import java.sql.*;

/**
 *
 * @author moham
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg", 1200, 700);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));

        dateChooserFrom.setDateFormatString("yyyy-MM-dd");
        dateChooserTo.setDateFormatString("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        dateChooserTo = new com.toedter.calendar.JDateChooser();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        PresentlLbl = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        AbsentLbl = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        checkBoxContact = new javax.swing.JCheckBox();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        checkBoxUniqueRegID = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Attendance Track");

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        dateChooserTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserToPropertyChange(evt);
            }
        });

        dateChooserFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserFromPropertyChange(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("On/From");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("To");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Search");

        PresentlLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PresentlLbl.setText("Present:");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(51, 255, 0));
        lblPresent.setText("---------");

        AbsentLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AbsentLbl.setText("Absent:");

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 51, 51));
        lblAbsent.setText("---------");

        checkBoxContact.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxContact.setText("Contact");
        checkBoxContact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxContactItemStateChanged(evt);
            }
        });

        checkBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxAddress.setText("Address");
        checkBoxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAddressItemStateChanged(evt);
            }
        });
        checkBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAddressActionPerformed(evt);
            }
        });

        checkBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxState.setText("State");
        checkBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxStateItemStateChanged(evt);
            }
        });

        checkBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxCountry.setText("Country");
        checkBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCountryItemStateChanged(evt);
            }
        });

        checkBoxUniqueRegID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxUniqueRegID.setText("Unique Reg ID");
        checkBoxUniqueRegID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxUniqueRegIDItemStateChanged(evt);
            }
        });
        checkBoxUniqueRegID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxUniqueRegIDActionPerformed(evt);
            }
        });

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(435, 435, 435)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PresentlLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPresent, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AbsentLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(checkBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(checkBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(checkBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(checkBoxUniqueRegID, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                        .addGap(15, 15, 15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnResetFilters)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(PresentlLbl)
                    .addComponent(lblPresent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnResetFilters)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AbsentLbl)
                                    .addComponent(lblAbsent)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(checkBoxContact)
                                    .addGap(18, 18, 18)
                                    .addComponent(checkBoxAddress)
                                    .addGap(18, 18, 18)
                                    .addComponent(checkBoxState)
                                    .addGap(18, 18, 18)
                                    .addComponent(checkBoxCountry)
                                    .addGap(18, 18, 18)
                                    .addComponent(checkBoxUniqueRegID))))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void checkBoxUniqueRegIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxUniqueRegIDActionPerformed

    private void checkBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAddressActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        txtSearch.setText("");
        dateChooserFrom.setDate(null);
        dateChooserTo.setDate(null);
        checkBoxContact.setSelected(false);
        checkBoxCountry.setSelected(false);
        checkBoxAddress.setSelected(false);
        checkBoxState.setSelected(false);
        checkBoxUniqueRegID.setSelected(false);

        loadDataInTable();
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    private void checkBoxContactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxContactItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxContactItemStateChanged

    private void checkBoxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAddressItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxAddressItemStateChanged

    private void checkBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxStateItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateItemStateChanged

    private void checkBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCountryItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxCountryItemStateChanged

    private void checkBoxUniqueRegIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIDItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxUniqueRegIDItemStateChanged

    private void dateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserFromPropertyChange
        loadDataInTable();
    }//GEN-LAST:event_dateChooserFromPropertyChange

    private void dateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserToPropertyChange
        loadDataInTable();
    }//GEN-LAST:event_dateChooserToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AbsentLbl;
    private javax.swing.JLabel PresentlLbl;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContact;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqueRegID;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private com.toedter.calendar.JDateChooser dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

//    private void loadDataInTable() {
//        List<String> columns = new ArrayList<>(Arrays.asList(
//                "ID", "Name", "Gender", "Email", "Date", "CheckIn", "CheckOut", "Work Duration"
//        ));
//
//        String searchText = txtSearch.getText().trim();
//        Date fromDateFromCal = dateChooserFrom.getDate();
//        LocalDate fromDate = null;
//        if (fromDateFromCal != null) {
//            fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//        }
//
//        Date toDateFromCal = dateChooserTo.getDate();
//        LocalDate toDate = null;
//        if (toDateFromCal != null) {
//            toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//        }
//
//        Long daysBetween = null;
//        if (fromDate != null && toDate != null) {
//            daysBetween = countWeekDays(fromDate, toDate);
//        }
//
//        Boolean contactInclude = checkBoxContact.isSelected();
//        Boolean addressInclude = checkBoxAddress.isSelected();
//        Boolean stateInclude = checkBoxState.isSelected();
//        Boolean countryInclude = checkBoxCountry.isSelected();
//        Boolean uniqueregidInclude = checkBoxUniqueRegID.isSelected();
//
//        String sqlQuery = "SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration";
//        if (contactInclude) {
//            columns.add("Contact");
//            sqlQuery += ", ud.contact";
//        }
//        if (addressInclude) {
//            columns.add("Address");
//            sqlQuery += ", ud.address";
//        }
//        if (stateInclude) {
//            columns.add("State");
//            sqlQuery += ", ud.state";
//        }
//        if (countryInclude) {
//            columns.add("Country");
//            sqlQuery += ", ud.country";
//        }
//        if (uniqueregidInclude) {
//            columns.add("Unique Reg ID");
//            sqlQuery += ", ud.uniqueregid";
//        }
//
//        sqlQuery += " FROM userdetails AS ud INNER JOIN userattendance AS ua ON ud.id = ua.userid";
//
//        if (searchText != null && !searchText.isEmpty()) {
//            sqlQuery += " WHERE (ud.name LIKE '%" + searchText + "%' OR ud.email LIKE '%" + searchText + "%')";
//            if (fromDate != null && toDate != null) {
//                sqlQuery += " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
//            } else if (fromDate != null) {
//                sqlQuery += " AND ua.date = '" + fromDate + "'";
//            }
//        } else {
//            if (fromDate != null && toDate != null) {
//                sqlQuery += " WHERE ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
//            } else if (fromDate != null) {
//                sqlQuery += " WHERE ua.date = '" + fromDate + "'";
//            }
//        }
//
//        DefaultTableModel model = new DefaultTableModel();
//        model.setColumnIdentifiers(columns.toArray());
//        userTable.setModel(model);
//
//        try {
//            Connection con = ConnectionProvider.getcon();
//            Statement st = con.createStatement();
//            ResultSet rs = st.executeQuery(sqlQuery);
//            long presentCount = 0L;
//            long absentCount = 0L;
//            Set<String> emailList = new HashSet<>();
//            while (rs.next()) {
//                List<Object> row = new ArrayList<>();
//                row.add(rs.getString("id"));
//                row.add(rs.getString("name"));
//                row.add(rs.getString("gender"));
//                row.add(rs.getString("email"));
//                emailList.add(rs.getString("email"));
//                row.add(rs.getString("date"));
//                row.add(rs.getString("checkin"));
//                row.add(rs.getString("checkout"));
//                row.add(rs.getString("workduration"));
//                if (contactInclude) {
//                    row.add(rs.getString("contact"));
//                }
//                if (addressInclude) {
//                    row.add(rs.getString("address"));
//                }
//                if (stateInclude) {
//                    row.add(rs.getString("state"));
//                }
//                if (countryInclude) {
//                    row.add(rs.getString("country"));
//                }
//                if (uniqueregidInclude) {
//                    row.add(rs.getString("uniqueregid"));
//                }
//
//                if (rs.getString("checkout") == null) {
//                    absentCount++;
//                } else {
//                    presentCount++;
//                }
//
//                model.addRow(row.toArray());
//
//                if (emailList.size() == 1) {
//                    lblPresent.setVisible(true);
//                    lblAbsent.setVisible(true);
//                    AbsentLbl.setVisible(true);
//                    PresentlLbl.setVisible(true);
//                    lblPresent.setText(Long.toString(presentCount));
//                    if (daysBetween != null && daysBetween > 0) {
//                        absentCount = daysBetween - presentCount;
//                    }
//                    lblAbsent.setText(Long.toString(absentCount));
//                } else {
//                    lblPresent.setVisible(false);
//                    lblAbsent.setVisible(false);
//                    AbsentLbl.setVisible(false);
//                    PresentlLbl.setVisible(false);
//                }
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace(); // Log the exception for debugging
//            JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
//        }
//    }
    private void loadDataInTable() {
        // Define table columns
        List<String> columns = new ArrayList<>(Arrays.asList(
                "ID", "Name", "Gender", "Email", "Date",
                "First CheckIn", "First CheckOut",
                "Second CheckIn", "Second CheckOut",
                "Work Duration"
        ));

        // Get search text and date range
        String searchText = txtSearch.getText().trim();
        Date fromDateFromCal = dateChooserFrom.getDate();
        LocalDate fromDate = null;
        if (fromDateFromCal != null) {
            fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }

        Date toDateFromCal = dateChooserTo.getDate();
        LocalDate toDate = null;
        if (toDateFromCal != null) {
            toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }

//       Date toDateFromCal = dateChooserTo.getDate();
//        Long daysBetween = null;
//        if (fromDate != null && toDate != null) {
//            daysBetween = countWeekDays(fromDate, toDate);
//        }
        // List of days in a week (Monday to Sunday)
        // List of days in a week (Monday to Sunday)
        List<DayOfWeek> weekDays = Arrays.asList(
                DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,
                DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY
        );

        DayOfWeek holiday = DayOfWeek.SUNDAY; // Default holiday

// Loop through the days of the week
//        for (DayOfWeek day : weekDays) {
//            if (!userAttended(day, fromDate, toDate, userId)) { // If the user is absent on this day
//                holiday = day; // Set this day as the holiday
//                break; // Stop checking further
//            }
//        }
        Long daysBetween = null;
        if (fromDate != null && toDate != null) {
            daysBetween = countWeekDays(fromDate, toDate, holiday);
        }

        // Check which optional columns to include
        Boolean contactInclude = checkBoxContact.isSelected();
        Boolean addressInclude = checkBoxAddress.isSelected();
        Boolean stateInclude = checkBoxState.isSelected();
        Boolean countryInclude = checkBoxCountry.isSelected();
        Boolean uniqueregidInclude = checkBoxUniqueRegID.isSelected();

        // Build SQL query
        String sqlQuery = "SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, "
                + "ua.fcheckin, ua.fcheckout, ua.scheckin, ua.scheckout, ua.workduration";
        if (contactInclude) {
            columns.add("Contact");
            sqlQuery += ", ud.contact";
        }
        if (addressInclude) {
            columns.add("Address");
            sqlQuery += ", ud.address";
        }
        if (stateInclude) {
            columns.add("State");
            sqlQuery += ", ud.state";
        }
        if (countryInclude) {
            columns.add("Country");
            sqlQuery += ", ud.country";
        }
        if (uniqueregidInclude) {
            columns.add("Unique Reg ID");
            sqlQuery += ", ud.uniqueregid";
        }

        sqlQuery += " FROM userdetails AS ud INNER JOIN userattendance AS ua ON ud.id = ua.userid";

        // Add search and date filters
        if (searchText != null && !searchText.isEmpty()) {
            sqlQuery += " WHERE (ud.name LIKE '%" + searchText + "%' OR ud.email LIKE '%" + searchText + "%')";
            if (fromDate != null && toDate != null) {
                sqlQuery += " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
            } else if (fromDate != null) {
                sqlQuery += " AND ua.date = '" + fromDate + "'";
            }
        } else {
            if (fromDate != null && toDate != null) {
                sqlQuery += " WHERE ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
            } else if (fromDate != null) {
                sqlQuery += " WHERE ua.date = '" + fromDate + "'";
            }
        }

        // Set up the table model
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns.toArray());
        userTable.setModel(model);

        try {
            Connection con = ConnectionProvider.getcon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sqlQuery);

            long presentCount = 0L;
            long absentCount = 0L;
            Set<String> emailList = new HashSet<>();

            while (rs.next()) {
                List<Object> row = new ArrayList<>();
                row.add(rs.getString("id"));
                row.add(rs.getString("name"));
                row.add(rs.getString("gender"));
                row.add(rs.getString("email"));
                emailList.add(rs.getString("email"));
                row.add(rs.getString("date"));
                row.add(rs.getString("fcheckin"));  // First CheckIn
                row.add(rs.getString("fcheckout")); // First CheckOut
                row.add(rs.getString("scheckin"));  // Second CheckIn
                row.add(rs.getString("scheckout")); // Second CheckOut
                row.add(rs.getString("workduration")); // Work Duration

                // Add optional columns
                if (contactInclude) {
                    row.add(rs.getString("contact"));
                }
                if (addressInclude) {
                    row.add(rs.getString("address"));
                }
                if (stateInclude) {
                    row.add(rs.getString("state"));
                }
                if (countryInclude) {
                    row.add(rs.getString("country"));
                }
                if (uniqueregidInclude) {
                    row.add(rs.getString("uniqueregid"));
                }

                // Count present and absent
                if (rs.getString("fcheckout") != null || rs.getString("scheckout") != null) {
                    presentCount++;
                } else {
                    absentCount++;
                }

                model.addRow(row.toArray());
            }

            // Update present/absent labels
            if (emailList.size() == 1) {
                lblPresent.setVisible(true);
                lblAbsent.setVisible(true);
                AbsentLbl.setVisible(true);
                PresentlLbl.setVisible(true);
                lblPresent.setText(Long.toString(presentCount));
                if (daysBetween != null && daysBetween > 0) {
                    absentCount = daysBetween - presentCount;
                }
                lblAbsent.setText(Long.toString(absentCount));
            } else {
                lblPresent.setVisible(false);
                lblAbsent.setVisible(false);
                AbsentLbl.setVisible(false);
                PresentlLbl.setVisible(false);
            }
        } catch (Exception ex) {
            ex.printStackTrace(); // Log the exception for debugging
            JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
        }
    }

//    private Long countWeekDays(LocalDate start, LocalDate end) {
//        long count = 0;
//        LocalDate date = start;
//        while (date.isBefore(end) || date.equals(end)) {
//            if (!(date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
//                count++;
//            }
//            date = date.plusDays(1);
//        }
//        return count;
//    }
    private Long countWeekDays(LocalDate start, LocalDate end, DayOfWeek holiday) {
        long count = 0;
        LocalDate date = start;
        while (date.isBefore(end) || date.equals(end)) {
            // Exclude the specified holiday
            if (!date.getDayOfWeek().equals(holiday)) {
                count++;
            }
            date = date.plusDays(1);
        }
        return count;
    }

    private boolean userAttended(DayOfWeek dayOfWeek, LocalDate fromDate, LocalDate toDate, int userId) throws SQLException {
        Connection connection = ConnectionProvider.getcon();

        // Query to check if the user has attendance records for the given day of the week
        String query = "SELECT COUNT(*) AS count FROM userattendance "
                + "WHERE userid = ? AND date BETWEEN ? AND ? AND DAYOFWEEK(date) = ?";

        PreparedStatement statement = connection.prepareStatement(query);
        statement.setInt(1, userId);
        statement.setDate(2, java.sql.Date.valueOf(fromDate));
        statement.setDate(3, java.sql.Date.valueOf(toDate));
        statement.setInt(4, dayOfWeek.getValue()); // DAYOFWEEK returns 1 for Sunday, 2 for Monday, etc.

        ResultSet rs = statement.executeQuery();
        if (rs.next()) {
            int count = rs.getInt("count");
            return count > 0; // User attended if there are records for this day
        }

        return false; // No records found
    }
}
