/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.google.gson.Gson;
import dao.ConnectionProvider;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.glxn.qrgen.core.image.ImageType;
import net.glxn.qrgen.javase.QRCode;
import utlity.BDUtility;

/**
 *
 * @author moham
 */
public class GnerateQr extends javax.swing.JFrame {

    /**
     * Creates new form GnerateQr
     */
    public GnerateQr() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg", 1101, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        lblImage = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        btnSaveQrat = new javax.swing.JButton();
        btnSaveQr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jInternalFrame1.setVisible(true);
        jInternalFrame1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jInternalFrame1MouseClicked(evt);
            }
        });

        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Generate User Qr");

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Gender", "Email", "Contact", "Address", "State", "Country", "Registration Id", "Image Name"
            }
        ));
        UserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserTableMouseClicked(evt);
            }
        });
        UserTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                UserTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(UserTable);

        btnSaveQrat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSaveQrat.setText("Save Qr at");
        btnSaveQrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQratActionPerformed(evt);
            }
        });

        btnSaveQr.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSaveQr.setText("Save Qr");
        btnSaveQr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnSaveQr, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveQrat, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveQrat, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveQr, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked

    }//GEN-LAST:event_lblImageMouseClicked

    private void jInternalFrame1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jInternalFrame1MouseClicked

    }//GEN-LAST:event_jInternalFrame1MouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    //method which genrate qr code
    ByteArrayOutputStream out = null;
    String email = null;
    private void UserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserTableMouseClicked
//        int index = UserTable.getSelectedRow();
//        TableModel model = UserTable.getModel();
//        String id = model.getValueAt(index, 0).toString();
//        String name = model.getValueAt(index, 1).toString();
//        email = model.getValueAt(index, 3).toString();
//        String registrationId = model.getValueAt(index, 8).toString();
//
//        Map<String, String> data = new HashMap<>();
//        data.put("id", id);
//        data.put("name", name);
//        data.put("email", email);
//        data.put("registrationId", registrationId);
//
//        Gson gson = new Gson();
//        String jsonData = gson.toJson(data);
//
//        out = QRCode.from(jsonData).withSize(322, 286).to(ImageType.PNG).stream();
//        try {
//            byte[] imageData = out.toByteArray();
//            ImageIcon icon = new ImageIcon(imageData);
//            lblImage.setIcon(icon);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }

//third
//        try {
//            int index = UserTable.getSelectedRow();
//            TableModel model = UserTable.getModel();
//            String id = model.getValueAt(index, 0).toString();
//            String name = model.getValueAt(index, 1).toString();
//            email = model.getValueAt(index, 3).toString();
//            String registrationId = model.getValueAt(index, 8).toString();
//
//            Map<String, String> data = new HashMap<>();
//            data.put("id", id);
//            data.put("name", name);
//            data.put("email", email);
//            data.put("registrationId", registrationId);
//
//            Gson gson = new Gson();
//            String jsonData = gson.toJson(data);
//
//            // Generate QR code
//            ByteArrayOutputStream out = QRCode.from(jsonData)
//                    .withSize(250, 250) // Use square dimensions
//                    .to(ImageType.PNG)
//                    .stream();
//
//            // Convert to ImageIcon
//            byte[] imageData = out.toByteArray();
//            ImageIcon icon = new ImageIcon(imageData);
//
//            // Scale image if needed
//            Image scaledImage = icon.getImage().getScaledInstance(
//                    lblImage.getWidth(),
//                    lblImage.getHeight(),
//                    Image.SCALE_SMOOTH
//            );
//
//            lblImage.setIcon(new ImageIcon(scaledImage));
//
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this,
//                    "Error generating QR code: " + ex.getMessage(),
//                    "Error",
//                    JOptionPane.ERROR_MESSAGE
//            );
//        }
//seconmd
        int index = UserTable.getSelectedRow();
        TableModel model = UserTable.getModel();
        String id = model.getValueAt(index, 0).toString();
        String name = model.getValueAt(index, 1).toString();
        email = model.getValueAt(index, 3).toString();
        String registrationId = model.getValueAt(index, 8).toString();

        Map<String, String> data = new HashMap<>();
        data.put("id", id);
        data.put("name", name);
        data.put("email", email);
        data.put("registrationId", registrationId);

        Gson gson = new Gson();
        String jsonData = gson.toJson(data);

        try (ByteArrayOutputStream out = QRCode.from(jsonData).withSize(322, 286).to(ImageType.PNG).stream()) {
            byte[] imageData = out.toByteArray();
            ImageIcon icon = new ImageIcon(imageData);
            lblImage.setIcon(icon);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error generating QR code: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_UserTableMouseClicked


    private void btnSaveQratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQratActionPerformed
//        try {
//            if (out == null) {
//                JOptionPane.showMessageDialog(this, "No Qr Code Generated ");
//                return;
//            }
//
//            JFileChooser fileChooser = new JFileChooser();
//            fileChooser.setDialogTitle("Save QR Code at");
//            fileChooser.setSelectedFile = (new File(email + ".png"));
//            int userSelection = fileChooser.showSaveDialog(this);
//            if (userSelection == JFilChooser.APPROVE_OPTION) {
//                File fileToSave = fileChooser.getSelectedFile();
//                try {
//                    java.nio.file.Files.write(fileToSave.toPath(), out.toByteArray());
//                    OptionPane.showMessageDialog(this, "Qr code saved successfully!");
//                } catch (Exception ex) {
//                    JOptionPane.showMessageDialog(this, "Error saving QR code","Error",JOptionPane.ERROR_MESSAGE);
//                }
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, "Something went wrong: ");
//     }

//Third
   try {
    if (out == null || out.toByteArray().length == 0) {
        JOptionPane.showMessageDialog(this, "No QR Code Generated", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Create File Chooser
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save QR Code at");
    
    // Set default file name
    fileChooser.setSelectedFile(new File(email + ".png"));

    // Show save dialog
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();

        try {
            // Write QR code image data to file
            java.nio.file.Files.write(fileToSave.toPath(), out.toByteArray());
            
            JOptionPane.showMessageDialog(this, "QR Code saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error saving QR code: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Something went wrong: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

   
//second
//        int index = UserTable.getSelectedRow();
//        TableModel model = UserTable.getModel();
//        String id = model.getValueAt(index, 0).toString();
//        String name = model.getValueAt(index, 1).toString();
//        email = model.getValueAt(index, 3).toString();
//        String registrationId = model.getValueAt(index, 8).toString();
//
//        // Create a custom string (e.g., comma-separated values)
//        String qrData = id + "," + name + "," + email + "," + registrationId;
//        System.out.println("QR Code Data: " + qrData); // Debug log
//
//        try (ByteArrayOutputStream out = QRCode.from(qrData).withSize(322, 286).to(ImageType.PNG).stream()) {
//            byte[] imageData = out.toByteArray();
//            ImageIcon icon = new ImageIcon(imageData);
//            lblImage.setIcon(icon);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Error generating QR code: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_btnSaveQratActionPerformed

    
    private void btnSaveQrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQrActionPerformed
//        try {
        //            if (out == null) {
        //                JOptionPane.showMessageDialog(this, "No Qr Code Generated ");
        //                return;
        //            }
        //
        //            String defaultDir = BDUtility.getpath("qrCodes");
        //            File directory = new File(defaultDir);
        //            if (!directory.exists()) {
        //                directory.mkdirs();
        //            }
        //
        //            File defaultFile = new File(directory, email + ".jpg");
        //            try {
        //                java.nio.file.Files.write(defaultFile.toPath(), out.toByteArray());
        //                JOptionPane.showMessageDialog(null, "QR Code saved successfully.");
        //            } catch (Exception ex) {
        //                JOptionPane.showMessageDialog(null, "Error saving QR Codes." + "Error" + JOptionPane.ERROR_MESSAGE);
        //            }
        //        } catch (Exception ex) {
        //            JOptionPane.showMessageDialog(null, "Something went wrong: ");
        //        }

        try {
            ImageIcon icon = (ImageIcon) lblImage.getIcon();

            // Check if QR exists in UI
            if (icon == null) {
                JOptionPane.showMessageDialog(this, "Generate QR code first!");
                return;
            }

            // Get raw image data
            BufferedImage bImage = new BufferedImage(
                    icon.getIconWidth(),
                    icon.getIconHeight(),
                    BufferedImage.TYPE_INT_ARGB
            );
            Graphics2D g2d = bImage.createGraphics();
            icon.paintIcon(null, g2d, 0, 0);
            g2d.dispose();

            // Save logic
            String defaultDir = BDUtility.getpath("qrCodes");
            File directory = new File(defaultDir);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            File defaultFile = new File(directory, email + ".png");

            try (FileOutputStream fos = new FileOutputStream(defaultFile)) {
                ImageIO.write(bImage, "PNG", fos);
                JOptionPane.showMessageDialog(null, "QR Code saved successfully.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                        "Save Error: " + ex.getMessage(), // Show actual error
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "Error: " + ex.getMessage(), // Show actual error
                    "Critical Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btnSaveQrActionPerformed

    private void UserTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_UserTableComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_UserTableComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        DefaultTableModel model = (DefaultTableModel) UserTable.getModel();
        model.setRowCount(0); // Clear existing rows before adding new ones

        try (Connection con = ConnectionProvider.getcon(); Statement st = con.createStatement(); ResultSet rs = st.executeQuery("SELECT * FROM userdetails")) {

            while (rs.next()) {
                // Corrected way of adding row data
                model.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getString("gender"),
                    rs.getString("email"),
                    rs.getString("contact"),
                    rs.getString("address"),
                    rs.getString("state"),
                    rs.getString("country"),
                    rs.getString("uniqueregid"), //   rs.getString("imagename")
                });
            }

        } catch (SQLException ex) {
            ex.printStackTrace(); // Helps in debugging
            JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GnerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GnerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GnerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GnerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GnerateQr().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserTable;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSaveQr;
    private javax.swing.JButton btnSaveQrat;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImage;
    // End of variables declaration//GEN-END:variables
}
