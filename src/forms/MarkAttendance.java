/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import dao.ConnectionProvider;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.BorderFactory;
import javax.swing.Timer;
import utlity.BDUtility;
import java.sql.*;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author moham
 */
public class MarkAttendance extends javax.swing.JFrame implements Runnable, ThreadFactory {

    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;

    /**
     * Creates new form MarkAttendance
     */
    public MarkAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg", 1200, 700);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
        initWebcam();

        Timer timer = new Timer(1, e -> updateTime());
        timer.start();
    }

    private void updateTime() {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        lblTime.setText(simpleDateFormat.format(new Date()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        webCamPanel = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblCheckInCheckOut = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 700));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Mark Attendance");

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        webCamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Date");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Time");

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblTime.setText("Time");

        lblCheckInCheckOut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblCheckInCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(172, 172, 172))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(431, 431, 431)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 325, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGap(833, 833, 833)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(785, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(173, 173, 173)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(lblCheckInCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(444, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(219, 219, 219)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        running = false;
        stopWebcam();

        if (executor != null && !executor.isShutdown()) {
            executor.shutdown();
        }
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblCheckInCheckOut;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel webCamPanel;
    // End of variables declaration//GEN-END:variables

// //method to read qr code 
//    Map<String, String> resultMap = new HashMap<String, String>();
//
//    @Override
//    public void run() {
//        do {
//            try {
//                Thread.sleep(1000);
//            } catch (InterruptedException ex) {
//
//            }
//
//            try {
//                Result result = null;
//                BufferedImage image = null;
//                if (webcam.isOpen()) {
//                    if ((image = webcam.getImage()) == null) {
//                        continue;
//                    }
//                }
//
//                LuminanceSource source = new BufferedImageLuminanceSource(image);
//                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
//
//                try {
//                    result = new MultiFormatReader().decode(bitmap);
//                } catch (NotFoundException ex) {
//
//                }
//
//                if (result != null) {
//                    String jsonString = result.getText();
//                    Gson gson = new Gson();
//                    java.lang.reflect.Type type = new TypeToken<Map<String, String>>() {
//                    }.getType();
//                    resultMap = gson.fromJson(jsonString, type);
//
//                    String finalPath = BDUtility.getpath("images\\" + resultMap.get("email") + ".jpg");
//                    CircularImageFrame(finalPath);
//                }
//
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//        } while (running);
//    }
    Map<String, String> resultMap = new HashMap<>();

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            try {
                Result result = null;
                BufferedImage image = null;
                if (webcam.isOpen()) {
                    if ((image = webcam.getImage()) == null) {
                        continue;
                    }
                }

                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException ex) {
                    System.out.println("No QR code detected in the image.");
                    continue; // Skip to the next iteration
                }

                if (result != null) {
                    String jsonString = result.getText();
                    System.out.println("QR Code Data: " + jsonString); // Debug log

                    // Parse the JSON string into a Map
                    Gson gson = new Gson();
                    java.lang.reflect.Type type = new TypeToken<Map<String, String>>() {
                    }.getType();

                    try {
                        resultMap = gson.fromJson(jsonString, type);
                        System.out.println("Parsed Data: " + resultMap); // Debug log

                        // Ensure the "email" key exists in the map
                        if (resultMap.containsKey("email")) {
                            String email = resultMap.get("email");
                            String finalPath = BDUtility.getpath("images\\" + email + ".jpg");
                            CircularImageFrame(finalPath);
                        } else {
                            System.err.println("Email key not found in QR code data.");
                        }
                    } catch (JsonSyntaxException e) {
                        System.err.println("Invalid JSON data: " + jsonString);
                        e.printStackTrace();
                    }
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } while (running);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }

    private void initWebcam() {
        webcam = Webcam.getDefault();
        if (webcam != null) {
            Dimension[] resoulation = webcam.getViewSizes();
            Dimension maxResoulation = resoulation[resoulation.length - 1];

            if (webcam.isOpen()) {
                webcam.close();
            }

            webcam.setViewSize(maxResoulation);
            webcam.open();

            panel = new WebcamPanel(webcam);
            panel.setPreferredSize(maxResoulation);
            panel.setFPSDisplayed(true);

            webCamPanel.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 689, 518));
            executor.execute(this);
            executor.shutdown();
        } else {
            System.out.println("Issue with webcam.");
        }
    }

    private void stopWebcam() {
        if (webcam != null && webcam.isOpen()) {
            webcam.close();
        }
    }
    private BufferedImage imagee = null;

    private void CircularImageFrame(String imagePath) {
        try {
            Connection con = ConnectionProvider.getcon();
            PreparedStatement ps = con.prepareStatement("SELECT * FROM userdetails WHERE email = ?");
            ps.setString(1, resultMap.get("email"));
            ResultSet rs = ps.executeQuery();

            if (!rs.next()) {
                showPopUpForCertainDuration("User is not Registered or Deleted", "Invalid Qr", JOptionPane.ERROR_MESSAGE);
                return;
            }

            imagee = null;
            if (imagePath != null) { // Prevent NullPointerException
                File imageFile = new File(imagePath);
                if (imageFile.exists()) {
                    try {
                        imagee = ImageIO.read(imageFile);
                        imagee = createCircularImage(imagee);
                        ImageIcon icon = new ImageIcon(imagee);
                        lblImage.setIcon(icon);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } else {
                    BufferedImage imageeee = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
                    Graphics2D g2d = imageeee.createGraphics(); // Fixed incorrect Graphics2D case

                    g2d.setColor(Color.BLACK);
                    g2d.fillOval(25, 25, 250, 250);

                    g2d.setFont(new Font("Serif", Font.BOLD, 250));
                    g2d.setColor(Color.WHITE);
                    g2d.drawString(String.valueOf(resultMap.get("name").charAt(0)).toUpperCase(), 75, 255);
                    g2d.dispose();

                    ImageIcon imageIconn = new ImageIcon(imageeee);
                    lblImage.setIcon(imageIconn);
                    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    this.pack();
                    this.setLocationRelativeTo(null);
                    this.setVisible(true);
                }
                lblName.setHorizontalAlignment(JLabel.CENTER);
                lblName.setText(resultMap.get("name"));
                if (!checkInCheckOut()) {
                    return;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showPopUpForCertainDuration(String popUpMessage, String popUpHeader, int iconId) throws HeadlessException {
        final JOptionPane optionpane = new JOptionPane(popUpMessage, iconId);
        final JDialog dialog = optionpane.createDialog(popUpHeader);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.dispose();
                clearUserDetails();
            }
        });
        timer.setRepeats(false);
        timer.start();
        dialog.setVisible(true);
    }

    private void clearUserDetails() {
        lblCheckInCheckOut.setText("");
        lblCheckInCheckOut.setForeground(null);
        lblCheckInCheckOut.setBackground(null);
        lblCheckInCheckOut.setOpaque(false);
        lblName.setText(null);
        lblImage.setIcon(null);
    }

    private BufferedImage createCircularImage(BufferedImage imagee) {
        int diameter = 285;
        BufferedImage resizedImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(imagee, 0, 0, diameter, diameter, null);
        g2.dispose();
        BufferedImage circularImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        g2 = circularImage.createGraphics();
        Ellipse2D.Double circle = new Ellipse2D.Double(0, 0, diameter, diameter);
        g2.setClip(circle);
        g2.drawImage(resizedImage, 0, 0, null);
        g2.dispose();
        return circularImage;
    }

//    private boolean checkInCheckOut() throws HeadlessException, SQLException {
//        String popUpHeader = null;
//        String popUpMessage = null;
//        Color color = null;
//
//        Connection con = ConnectionProvider.getcon();
//        Statement st = con.createStatement();
//
//        LocalDate currentDate = LocalDate.now();
//        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
//
//        LocalDateTime currentDateTime = LocalDateTime.now();
//        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
//
//        ResultSet rs = st.executeQuery("SELECT * FROM userattendance WHERE date='" + currentDate.format(dateFormatter) + "' AND userid=" + Integer.valueOf(resultMap.get("id")) + ";");
//
//        Connection connection = ConnectionProvider.getcon();
//        if (rs.next()) { // If the user has already checked in today
//            String fCheckInDateTime = rs.getString("fcheckin");
//            String fCheckOutDateTime = rs.getString("fcheckout");
//            String sCheckInDateTime = rs.getString("scheckin");
//            String sCheckOutDateTime = rs.getString("scheckout");
//
//            if (fCheckInDateTime != null && fCheckOutDateTime == null) {
//                // First check-out
//                LocalDateTime checkInLocalDateTime = LocalDateTime.parse(fCheckInDateTime, dateTimeFormatter);
//                Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);
//                long hours = duration.toHours();
//                long minutes = duration.minusHours(hours).toMinutes();
//
//                String updateQuery = "UPDATE userattendance SET fcheckout=?, fworkduration=? WHERE date=? AND userid=?";
//                PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
//                preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
//                preparedStatement.setString(2, hours + " Hours and " + minutes + " Minutes");
//                preparedStatement.setString(3, currentDate.format(dateFormatter));
//                preparedStatement.setString(4, resultMap.get("id"));
//
//                preparedStatement.executeUpdate();
//                popUpMessage = "Checked out at " + currentDateTime.format(dateTimeFormatter) + "\nWork Duration: " + hours + " Hours and " + minutes + " Minutes";
//                popUpHeader = "First Checkout";
//                color = Color.RED;
//            } else if (fCheckInDateTime != null && fCheckOutDateTime != null && sCheckInDateTime == null) {
//                // Second check-in
//                String updateQuery = "UPDATE userattendance SET scheckin=? WHERE date=? AND userid=?";
//                PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
//                preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
//                preparedStatement.setString(2, currentDate.format(dateFormatter));
//                preparedStatement.setString(3, resultMap.get("id"));
//
//                preparedStatement.executeUpdate();
//                popUpMessage = "Checked in again at " + currentDateTime.format(dateTimeFormatter);
//                popUpHeader = "Second Check-in";
//                color = Color.GREEN;
//            } else if (sCheckInDateTime != null && sCheckOutDateTime == null) {
//                // Second check-out
//                LocalDateTime checkInLocalDateTime = LocalDateTime.parse(sCheckInDateTime, dateTimeFormatter);
//                Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);
//                long hours = duration.toHours();
//                long minutes = duration.minusHours(hours).toMinutes();
//
//                String updateQuery = "UPDATE userattendance SET scheckout=?, sworkduration=? WHERE date=? AND userid=?";
//                PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
//                preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
//                preparedStatement.setString(2, hours + " Hours and " + minutes + " Minutes");
//                preparedStatement.setString(3, currentDate.format(dateFormatter));
//                preparedStatement.setString(4, resultMap.get("id"));
//
//                preparedStatement.executeUpdate();
//                popUpMessage = "Checked out again at " + currentDateTime.format(dateTimeFormatter) + "\nWork Duration: " + hours + " Hours and " + minutes + " Minutes";
//                popUpHeader = "Second Checkout";
//                color = Color.RED;
//            } else {
//                popUpMessage = "Already Checked Out Twice for the Day!";
//                popUpHeader = "Invalid Checkout";
//                showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        } else {
//            // First-time check-in of the day
//            String insertQuery = "INSERT INTO userattendance (userid, date, fcheckin) VALUES (?, ?, ?)";
//            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
//            preparedStatement.setString(1, resultMap.get("id"));
//            preparedStatement.setString(2, currentDate.format(dateFormatter));
//            preparedStatement.setString(3, currentDateTime.format(dateTimeFormatter));
//            preparedStatement.executeUpdate();
//
//            popUpMessage = "Checked in at " + currentDateTime.format(dateTimeFormatter);
//            popUpHeader = "First Check-in";
//            color = Color.GREEN;
//        }
//
//        lblCheckInCheckOut.setHorizontalAlignment(JLabel.CENTER);
//        lblCheckInCheckOut.setText(popUpHeader);
//        lblCheckInCheckOut.setForeground(color);
//        lblCheckInCheckOut.setBackground(color.DARK_GRAY);
//        lblCheckInCheckOut.setOpaque(true);
//        showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
//        return true;
//    }
    //second
//    private boolean checkInCheckOut() throws HeadlessException, SQLException {
//        String popUpHeader = null;
//        String popUpMessage = null;
//        Color color = null;
//
//        // Use a single database connection
//        Connection connection = ConnectionProvider.getcon();
//
//        // Get current date and time
//        LocalDateTime currentDateTime = LocalDateTime.now();
//        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
//        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
//
//        // Fetch attendance record for the current date and user
//        String selectQuery = "SELECT * FROM userattendance WHERE date = ? AND userid = ?";
//        PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
//        selectStatement.setString(1, currentDateTime.format(dateFormatter));
//        selectStatement.setInt(2, Integer.valueOf(resultMap.get("id")));
//        ResultSet rs = selectStatement.executeQuery();
//
//        if (rs.next()) {
//            // Check if user has already checked out
//            String checkOutDateTime = rs.getString("checkout");
//            if (checkOutDateTime != null) {
//                popUpMessage = "Already checked out for the day.";
//                popUpHeader = "Invalid Checkout";
//                showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//
//            // Calculate work duration
//            String checkInDateTime = rs.getString("checkin");
//            LocalDateTime checkInLocalDateTime = LocalDateTime.parse(checkInDateTime, dateTimeFormatter);
//            Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);
//
//            long hours = duration.toHours();
//            long minutes = duration.toMinutes() % 60;
//            long seconds = duration.getSeconds() % 60;
//
//            // Ensure minimum work duration of 5 minutes
//            if (hours == 0 && minutes < 5) {
//                long remainingMinutes = 4 - minutes;
//                long remainingSeconds = 60 - seconds;
//
//                popUpMessage = String.format("Your work duration is less than 5 minutes.\nYou can check out after: %d minutes and %d seconds", remainingMinutes, remainingSeconds);
//                popUpHeader = "Duration Warning";
//                showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//
//            // Update checkout time and work duration
//            String updateQuery = "UPDATE userattendance SET checkout = ?, workduration = ? WHERE date = ? AND userid = ?";
//            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
//            updateStatement.setString(1, currentDateTime.format(dateTimeFormatter));
//            updateStatement.setString(2, hours + " Hours and " + minutes + " Minutes");
//            updateStatement.setString(3, currentDateTime.format(dateFormatter));
//            updateStatement.setInt(4, Integer.valueOf(resultMap.get("id")));
//            updateStatement.executeUpdate();
//
//            popUpMessage = "Checked out at " + currentDateTime.format(dateTimeFormatter) + "\nWork Duration: " + hours + " Hours and " + minutes + " Minutes";
//            popUpHeader = "Checkout";
//            color = Color.RED;
//        } else {
//            // Insert new check-in record
//            String insertQuery = "INSERT INTO userattendance (userid, date, checkin) VALUES (?, ?, ?)";
//            PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
//            insertStatement.setInt(1, Integer.valueOf(resultMap.get("id")));
//            insertStatement.setString(2, currentDateTime.format(dateFormatter));
//            insertStatement.setString(3, currentDateTime.format(dateTimeFormatter));
//            insertStatement.executeUpdate();
//
//            popUpMessage = "Checked in at " + currentDateTime.format(dateTimeFormatter);
//            popUpHeader = "CheckIn";
//            color = Color.GREEN;
//        }
//
//        // Update UI
//        lblCheckInCheckOut.setHorizontalAlignment(JLabel.CENTER);
//        lblCheckInCheckOut.setText(popUpHeader);
//        lblCheckInCheckOut.setForeground(color);
//        lblCheckInCheckOut.setBackground(Color.DARK_GRAY);
//        lblCheckInCheckOut.setOpaque(true);
//        showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
//
//        return true;
//    }
private boolean checkInCheckOut() throws HeadlessException, SQLException {
    String popUpHeader = null;
    String popUpMessage = null;
    Color color = null;

    Connection connection = ConnectionProvider.getcon(); // Use existing DB connection
    LocalDateTime currentDateTime = LocalDateTime.now();
    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    String selectQuery = "SELECT * FROM userattendance WHERE date = ? AND userid = ?";
    PreparedStatement selectStatement = connection.prepareStatement(selectQuery);
    selectStatement.setString(1, currentDateTime.format(dateFormatter));
    selectStatement.setInt(2, Integer.valueOf(resultMap.get("id")));
    ResultSet rs = selectStatement.executeQuery();

    if (rs.next()) {
        String fCheckin = rs.getString("fcheckin");
        String fCheckout = rs.getString("fcheckout");
        String sCheckin = rs.getString("scheckin");
        String sCheckout = rs.getString("scheckout");
        String prevWorkDuration = rs.getString("workduration");

        long totalSeconds = 0;
        if (prevWorkDuration != null && !prevWorkDuration.isEmpty()) {
            String[] parts = prevWorkDuration.split(":");
            totalSeconds += Integer.parseInt(parts[0]) * 3600 + Integer.parseInt(parts[1]) * 60; // Convert HH:MM:SS to seconds
        }

        // First checkout
        if (fCheckin != null && fCheckout == null) {
            LocalDateTime fCheckinTime = LocalDateTime.parse(fCheckin, dateTimeFormatter);
            long sessionSeconds = Duration.between(fCheckinTime, currentDateTime).getSeconds();
            totalSeconds += sessionSeconds;

            String updateQuery = "UPDATE userattendance SET fcheckout = ?, workduration = SEC_TO_TIME(?) WHERE date = ? AND userid = ?";
            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
            updateStatement.setString(1, currentDateTime.format(dateTimeFormatter));
            updateStatement.setLong(2, totalSeconds);
            updateStatement.setString(3, currentDateTime.format(dateFormatter));
            updateStatement.setInt(4, Integer.valueOf(resultMap.get("id")));
            updateStatement.executeUpdate();

            popUpMessage = "Checked out at " + currentDateTime.format(dateTimeFormatter) + "\nTotal Work Duration: " + formatDuration(totalSeconds);
            popUpHeader = "Checkout";
            color = Color.RED;
        }
        // Second check-in
        else if (fCheckout != null && sCheckin == null) {
            String updateQuery = "UPDATE userattendance SET scheckin = ? WHERE date = ? AND userid = ?";
            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
            updateStatement.setString(1, currentDateTime.format(dateTimeFormatter));
            updateStatement.setString(2, currentDateTime.format(dateFormatter));
            updateStatement.setInt(3, Integer.valueOf(resultMap.get("id")));
            updateStatement.executeUpdate();

            popUpMessage = "Checked in again at " + currentDateTime.format(dateTimeFormatter);
            popUpHeader = "Re-CheckIn";
            color = Color.GREEN;
        }
        // Second checkout
        else if (sCheckin != null && sCheckout == null) {
            LocalDateTime sCheckinTime = LocalDateTime.parse(sCheckin, dateTimeFormatter);
            long sessionSeconds = Duration.between(sCheckinTime, currentDateTime).getSeconds();
            totalSeconds += sessionSeconds;

            String updateQuery = "UPDATE userattendance SET scheckout = ?, workduration = SEC_TO_TIME(?) WHERE date = ? AND userid = ?";
            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
            updateStatement.setString(1, currentDateTime.format(dateTimeFormatter));
            updateStatement.setLong(2, totalSeconds);
            updateStatement.setString(3, currentDateTime.format(dateFormatter));
            updateStatement.setInt(4, Integer.valueOf(resultMap.get("id")));
            updateStatement.executeUpdate();

            popUpMessage = "Checked out at " + currentDateTime.format(dateTimeFormatter) + "\nTotal Work Duration: " + formatDuration(totalSeconds);
            popUpHeader = "Checkout";
            color = Color.RED;
        } else {
            popUpMessage = "Already checked out for the day.";
            popUpHeader = "Invalid Checkout";
            showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } else {
        // First time check-in
        String insertQuery = "INSERT INTO userattendance (userid, date, fcheckin) VALUES (?, ?, ?)";
        PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
        insertStatement.setInt(1, Integer.valueOf(resultMap.get("id")));
        insertStatement.setString(2, currentDateTime.format(dateFormatter));
        insertStatement.setString(3, currentDateTime.format(dateTimeFormatter));
        insertStatement.executeUpdate();

        popUpMessage = "Checked in at " + currentDateTime.format(dateTimeFormatter);
        popUpHeader = "CheckIn";
        color = Color.GREEN;
    }

    lblCheckInCheckOut.setHorizontalAlignment(JLabel.CENTER);
    lblCheckInCheckOut.setText(popUpHeader);
    lblCheckInCheckOut.setForeground(color);
    lblCheckInCheckOut.setBackground(Color.DARK_GRAY);
    lblCheckInCheckOut.setOpaque(true);
    showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);

    return true;
}

// Helper method to format duration in HH:MM:SS
private String formatDuration(long totalSeconds) {
    long hours = totalSeconds / 3600;
    long minutes = (totalSeconds % 3600) / 60;
    long seconds = totalSeconds % 60;
    return String.format("%02d:%02d:%02d", hours, minutes, seconds);
}



// Helper method to format duration as HH:mm:ss
    private String formatDuration(Duration duration) {
        return String.format("%02d:%02d:%02d",
                duration.toHours(),
                duration.toMinutesPart(),
                duration.toSecondsPart());
    }

// Helper method to add two durations (e.g., "01:30:00" + "00:45:00" = "02:15:00")
    private String addDurations(String duration1, String duration2) {
        String[] parts1 = duration1.split(":");
        String[] parts2 = duration2.split(":");

        int totalSeconds = Integer.parseInt(parts1[0]) * 3600
                + Integer.parseInt(parts1[1]) * 60
                + Integer.parseInt(parts1[2])
                + Integer.parseInt(parts2[0]) * 3600
                + Integer.parseInt(parts2[1]) * 60
                + Integer.parseInt(parts2[2]);

        int hours = totalSeconds / 3600;
        int minutes = (totalSeconds % 3600) / 60;
        int seconds = totalSeconds % 60;

        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

// Helper method to update check-in time
    private void updateCheckin(Connection connection, int userId, LocalDateTime time, String column) throws SQLException {
        String query = "UPDATE userattendance SET " + column + " = ? WHERE userid = ? AND date = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setTimestamp(1, Timestamp.valueOf(time));
        statement.setInt(2, userId);
        statement.setString(3, time.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        statement.executeUpdate();
    }

// Helper method to update checkout time and work duration
    private void updateCheckout(Connection connection, int userId, LocalDateTime time, String column, String workDuration) throws SQLException {
        String query = "UPDATE userattendance SET " + column + " = ?, workduration = ? WHERE userid = ? AND date = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setTimestamp(1, Timestamp.valueOf(time));
        statement.setString(2, workDuration);
        statement.setInt(3, userId);
        statement.setString(4, time.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        statement.executeUpdate();
    }

// Helper method to update UI components
    private void updateUI(String header, String message, Color color) {
        lblCheckInCheckOut.setText(header);
        lblCheckInCheckOut.setForeground(color);
        showPopUpForCertainDuration(message, header, JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (imagee != null) {
            g.drawImage(imagee, 0, 0, null);
        }
    }
}
